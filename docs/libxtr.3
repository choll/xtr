.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "LIBXTR" "3" "May 2022" "" "xtr"
.SH NAME
libxtr \- C++ logging library API reference
.SH LOG MACROS
.SS Basic Macros
.sp
The following macros log without reading the time of day at the point of
logging, instead it is read when the log message is received by the background
thread. Use these macros if a loss of timestamp accuracy is acceptable to gain
performance.
.INDENT 0.0
.TP
.B XTR_LOG(SINK, \&...) 
Basic log macro, logs the specified format string and arguments to the given sink, blocking if the sink is full. Timestamps are read in the background thread\-\-\-if this is undesirable use \fI\%XTR_LOG_RTC\fP or \fI\%XTR_LOG_TSC\fP which read timestamps at the point of logging. This macro will log regardless of the sink\(aqs log level. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_LOGL(LEVEL, SINK, \&...) 
Log level variant of \fI\%XTR_LOG\fP\&. If the specified log level has lower importance than the log level of the sink, then the message is dropped (please see the \fI\%log levels\fP section of the user guide for details).
.sp
.INDENT 7.0
.IP \(bu 2
LEVEL: The unqualified log level name, for example simply "info" or "error".
.UNINDENT

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If the \(aqfatal\(aq level is passed then the log message is written, \fI\%xtr::sink::sync\fP is invoked, then the program is terminated via abort(3).
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Log statements with the \(aqdebug\(aq level can be disabled at build time by defining XTR_NDEBUG\&. 
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B XTR_TRY_LOG(SINK, \&...) 
Non\-blocking variant of \fI\%XTR_LOG\fP\&. The message will be discarded if the sink is full. If a message is dropped a warning will appear in the log. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_TRY_LOGL(LEVEL, SINK, \&...) 
Non\-blocking variant of \fI\%XTR_LOGL\fP\&. The message will be discarded if the sink is full. If a message is dropped a warning will appear in the log.
.sp
.INDENT 7.0
.IP \(bu 2
LEVEL: The unqualified log level name, for example simply "info" or "error". 
.UNINDENT

.UNINDENT
.SS Time\-Stamp Counter Timestamped Macros
.sp
The following macros log and read the time\-stamp counter at the point of
logging. Use these macros if the most accurate timestamps are required. On some
systems reading rdtsc may be slower than using the real\-time clock (see below).
.INDENT 0.0
.TP
.B XTR_LOG_TSC(SINK, \&...) 
Timestamped log macro, logs the specified format string and arguments to the given sink along with a timestamp obtained by reading the CPU timestamp counter via the RDTSC instruction. The non\-blocking variant of this macro is \fI\%XTR_TRY_LOG_TSC\fP which will discard the message if the sink is full. This macro will log regardless of the sink\(aqs log level. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_LOGL_TSC(LEVEL, SINK, \&...) 
Log level variant of \fI\%XTR_LOG_TSC\fP\&. If the specified log level has lower importance than the log level of the sink, then the message is dropped (please see the \fI\%log levels\fP section of the user guide for details).
.sp
.INDENT 7.0
.IP \(bu 2
LEVEL: The unqualified log level name, for example simply "info" or "error".
.UNINDENT

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If the \(aqfatal\(aq level is passed then the log message is written, \fI\%xtr::sink::sync\fP is invoked, then the program is terminated via abort(3).
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Log statements with the \(aqdebug\(aq level can be disabled at build time by defining XTR_NDEBUG\&. 
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B XTR_TRY_LOG_TSC(SINK, \&...) 
Non\-blocking variant of \fI\%XTR_LOG_TSC\fP\&. The message will be discarded if the sink is full. If a message is dropped a warning will appear in the log. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_TRY_LOGL_TSC(LEVEL, SINK, \&...) 
Non\-blocking variant of \fI\%XTR_TRY_LOGL_TSC\fP\&. The message will be discarded if the sink is full. If a message is dropped a warning will appear in the log.
.sp
.INDENT 7.0
.IP \(bu 2
LEVEL: The unqualified log level name, for example simply "info" or "error". 
.UNINDENT

.UNINDENT
.SS Real\-Time Clock Timestamped Macros
.sp
The following macros log and read the system real\-time clock at the point of
logging. Use these macros if accurate timestamps are required.
.INDENT 0.0
.TP
.B XTR_LOG_RTC(SINK, \&...) 
Timestamped log macro, logs the specified format string and arguments to the given sink along with a timestamp obtained by invoking \fI\%clock_gettime(3)\fP <\fBhttps://www.man7.org/linux/man-pages/man3/clock_gettime.3.html\fP> with a clock source of CLOCK_REALTIME_COARSE on Linux or CLOCK_REALTIME_FAST on FreeBSD. Depending on the host CPU this may be faster than \fI\%XTR_LOG_TSC\fP\&. The non\-blocking variant of this macro is \fI\%XTR_TRY_LOG_RTC\fP which will discard the message if the sink is full. This macro will log regardless of the sink\(aqs log level. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_LOGL_RTC(LEVEL, SINK, \&...) 
Log level variant of \fI\%XTR_LOG_RTC\fP\&. If the specified log level has lower importance than the log level of the sink, then the message is dropped (please see the \fI\%log levels\fP section of the user guide for details).
.sp
.INDENT 7.0
.IP \(bu 2
LEVEL: The unqualified log level name, for example simply "info" or "error".
.UNINDENT

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If the \(aqfatal\(aq level is passed then the log message is written, \fI\%xtr::sink::sync\fP is invoked, then the program is terminated via abort(3).
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Log statements with the \(aqdebug\(aq level can be disabled at build time by defining XTR_NDEBUG\&. 
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B XTR_TRY_LOG_RTC(SINK, \&...) 
Non\-blocking variant of \fI\%XTR_LOG_RTC\fP\&. The message will be discarded if the sink is full. If a message is dropped a warning will appear in the log. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_TRY_LOGL_RTC(LEVEL, SINK, \&...) 
Non\-blocking variant of \fI\%XTR_TRY_LOGL_RTC\fP\&. The message will be discarded if the sink is full. If a message is dropped a warning will appear in the log.
.sp
.INDENT 7.0
.IP \(bu 2
LEVEL: The unqualified log level name, for example simply "info" or "error". 
.UNINDENT

.UNINDENT
.SS User\-Supplied Timestamp Macros
.sp
The following macros log and accept a user\-supplied timestamp.
.INDENT 0.0
.TP
.B XTR_LOG_TS(SINK, TS, \&...) 
User\-supplied timestamp log macro, logs the specified format string and arguments to the given sink along with the specified timestamp, blocking if the sink is full. The timestamp may be any type as long as it has a formatter defined\-\-\-please see the \fI\%custom formatters\fP section of the user guide for details. xtr::timespec is provided as a convenience type which is compatible with std::timespec and has a formatter pre\-defined. A formatter for std::timespec isn\(aqt defined in order to avoid conflict with user code that also defines such a formatter. This macro will log regardless of the sink\(aqs log level.
.sp
.INDENT 7.0
.IP \(bu 2
TS: The timestamp to apply to the log statement. 
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B XTR_LOGL_TS(LEVEL, SINK, TS, \&...) 
Log level variant of \fI\%XTR_LOG_TS\fP\&. If the specified log level has lower importance than the log level of the sink, then the message is dropped (please see the \fI\%log levels\fP section of the user guide for details).
.sp
.INDENT 7.0
.IP \(bu 2
LEVEL: The unqualified log level name, for example simply "info" or "error". 
.IP \(bu 2
TS: The timestamp to apply to the log statement.
.UNINDENT

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
If the \(aqfatal\(aq level is passed then the log message is written, \fI\%xtr::sink::sync\fP is invoked, then the program is terminated via abort(3).
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Log statements with the \(aqdebug\(aq level can be disabled at build time by defining XTR_NDEBUG\&. 
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B XTR_TRY_LOG_TS(SINK, TS, \&...) 
Non\-blocking variant of \fI\%XTR_LOG_TS\fP\&. The message will be discarded if the sink is full. If a message is dropped a warning will appear in the log. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_TRY_LOGL_TS(LEVEL, SINK, TS, \&...) 
Non\-blocking variant of \fI\%XTR_TRY_LOGL_TS\fP\&. The message will be discarded if the sink is full. If a message is dropped a warning will appear in the log.
.sp
.INDENT 7.0
.IP \(bu 2
LEVEL: The unqualified log level name, for example simply "info" or "error". 
.IP \(bu 2
TS: The timestamp to apply to the log statement. 
.UNINDENT

.UNINDENT
.SH LOGGER
.INDENT 0.0
.TP
.B class  xtr::logger 
The main logger class. When constructed a background thread will be created which is used for formatting log messages and performing I/O. To write to the logger call \fI\%logger::get_sink\fP to create a sink, then pass the sink to a macro such as \fI\%XTR_LOG\fP (see the \fI\%creating and writing to sinks\fP section of the user guide for details). 
.sp
Public Functions
.INDENT 7.0
.TP
.B template<typename  Clock  =  std::chrono::system_clock> inline  explicit  logger(const  char  *path, \fI\%Clock\fP  &&clock  =  \fI\%Clock\fP(), std::string  command_path  =  \fI\%default_command_path\fP(), \fI\%log_level_style_t\fP  level_style  =  \fI\%default_log_level_style\fP) 
Path constructor. The first argument is the path to a file which should be opened and logged to. The file will be opened in append mode, and will be created if it does not exist. Errors will be written to stdout.
.sp
.INDENT 7.0
.IP \(bu 2
path: The path of a file to write log statements to. 
.IP \(bu 2
clock: A function returning the current time of day as a std::timespec. This function will be invoked when creating timestamps for log statements produced by the basic log macros\-\-\- please see the \fI\%basic time source\fP section of the user guide for details. The default clock is std::chrono::system_clock. 
.IP \(bu 2
command_path: The path where the local domain socket used to communicate with \fI\%xtrctl\fP should be created. The default behaviour is to create sockets in $XDG_RUNTIME_DIR (if set, otherwise "/run/user/<uid>"). If that directory does not exist or is inaccessible then $TMPDIR (if set, otherwise "/tmp") will be used instead. See \fI\%default_command_path\fP for further details. To prevent a socket from being created, pass \fI\%null_command_path\fP\&. 
.IP \(bu 2
level_style: The log level style that will be used to prefix each log statement\-\-\-please refer to the \fI\%log_level_style_t\fP documentation for details. 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B template<typename  Clock  =  std::chrono::system_clock> inline  explicit  logger(FILE  *stream  =  stderr, \fI\%Clock\fP  &&clock  =  \fI\%Clock\fP(), std::string  command_path  =  \fI\%default_command_path\fP(), \fI\%log_level_style_t\fP  level_style  =  \fI\%default_log_level_style\fP) 
Stream constructor.
.sp
It is expected that this constructor will be used with streams such as stdout or stderr. If a stream that has been opened by the user is to be passed to the logger then the \fI\%stream constructor with reopen path\fP constructor is recommended instead, as this will mean that the log file can be rotated\-\-\-please refer to the xtrctl documentation for the \fI\%reopening log files\fP command for details.
.sp
.INDENT 7.0
.IP \(bu 2
stream: The stream to write log statements to. 
.IP \(bu 2
clock: Please refer to the \fI\%description\fP above. 
.IP \(bu 2
command_path: Please refer to the \fI\%description\fP above. 
.IP \(bu 2
level_style: The log level style that will be used to prefix each log statement\-\-\-please refer to the \fI\%log_level_style_t\fP documentation for details. 
.UNINDENT

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Reopening the log file via the \fI\%xtrctl\fP tool is \fInot\fP supported if this constructor is used.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B template<typename  Clock  =  std::chrono::system_clock> inline  logger(std::string  reopen_path, FILE  *stream, \fI\%Clock\fP  &&clock  =  \fI\%Clock\fP(), std::string  command_path  =  \fI\%default_command_path\fP(), \fI\%log_level_style_t\fP  level_style  =  \fI\%default_log_level_style\fP) 
 Stream constructor with reopen path.
.sp
.INDENT 7.0
.IP \(bu 2
reopen_path: The path of the file associated with the stream argument. This path will be used to reopen the stream if requested via the xtrctl \fI\%reopen command\fP\&. Pass \fI\%null_reopen_path\fP if no filename is associated with the stream. 
.IP \(bu 2
stream: The stream to write log statements to. 
.IP \(bu 2
clock: Please refer to the \fI\%description\fP above. 
.IP \(bu 2
command_path: Please refer to the \fI\%description\fP above. 
.IP \(bu 2
level_style: The log level style that will be used to prefix each log statement\-\-\-please refer to the \fI\%log_level_style_t\fP documentation for details. 
.UNINDENT

.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
Reopening the log file via the \fI\%xtrctl\fP tool is supported, with the reopen_path argument specifying the path to reopen.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B template<typename  Clock  =  std::chrono::system_clock> inline  explicit  logger(\fI\%storage_interface_ptr\fP  storage, \fI\%Clock\fP  &&clock  =  \fI\%Clock\fP(), std::string  command_path  =  \fI\%default_command_path\fP(), \fI\%log_level_style_t\fP  level_style  =  \fI\%default_log_level_style\fP) 
 Custom back\-end constructor (please refer to the \fI\%custom back\-ends\fP section of the user guide for further details on implementing a custom back\-end).
.sp
.INDENT 7.0
.IP \(bu 2
storage: Unique pointer to an object implementing the \fI\%storage_interface\fP interface. The logger will invoke methods on this object from the background thread in order to write log data to whatever underlying storage medium is implemented by the object, such as disk, network, dot\-matrix printer etc. 
.IP \(bu 2
clock: Please refer to the \fI\%description\fP above. 
.IP \(bu 2
command_path: Please refer to the \fI\%description\fP above. 
.IP \(bu 2
level_style: The log level style that will be used to prefix each log statement\-\-\-please refer to the \fI\%log_level_style_t\fP documentation for details. 
.UNINDENT

.UNINDENT
.INDENT 7.0
.TP
.B ~logger()  =  default 
Logger destructor. This function will join the consumer thread. If sinks are still connected to the logger then the consumer thread will not terminate until the sinks disconnect, i.e. the destructor will block until all connected sinks disconnect from the logger. 
.UNINDENT
.INDENT 7.0
.TP
.B inline  std::thread::native_handle_type  consumer_thread_native_handle() 
Returns the native handle for the logger\(aqs consumer thread. This may be used for setting thread affinities or other thread attributes. 
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%sink\fP  get_sink(std::string  name) 
Creates a sink with the specified name. Note that each call to this function creates a new sink; if repeated calls are made with the same name, separate sinks with the name name are created.
.INDENT 7.0
.TP
.B Parameters
\fBname\fP \-\- The name for the given sink. 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B void  register_sink(\fI\%sink\fP  &s, std::string  name)  noexcept 
Registers the sink with the logger. Note that the sink name does not need to be unique; if repeated calls are made with the same name, separate sinks with the same name are registered.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBs\fP \-\- The sink to register. 
.IP \(bu 2
\fBname\fP \-\- The name for the given sink.
.UNINDENT
.TP
.B Pre
The sink must be closed. 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B void  set_command_path(std::string  path)  noexcept 
Sets the logger command path\-\-\-please refer to the \(aqcommand_path\(aq argument \fI\%description\fP above for details. 
.UNINDENT
.INDENT 7.0
.TP
.B void  set_log_level_style(\fI\%log_level_style_t\fP  level_style)  noexcept 
Sets the logger log level style\-\-\-please refer to the \fI\%log_level_style_t\fP documentation for details. 
.UNINDENT
.UNINDENT
.SH SINK
.INDENT 0.0
.TP
.B class  xtr::sink 
Log sink class. A sink is how log messages are written to a log. Each sink has its own queue which is used to send log messages to the logger. Sink operations are not thread safe, with the exception of \fI\%set_level\fP and \fI\%level\fP\&.
.sp
It is expected that an application will have many sinks, such as a sink per thread or sink per component. A sink that is connected to a logger may be created by calling \fI\%logger::get_sink\fP\&. A sink that is not connected to a logger may be created simply by default construction, then the sink may be connected to a logger by calling \fI\%logger::register_sink\fP\&. 
.sp
Public Functions
.INDENT 7.0
.TP
.B sink(const  \fI\%sink\fP  &other) 
Sink copy constructor. When a sink is copied it is automatically registered with the same logger object as the source sink, using the same sink name. The sink name may be modified by calling \fI\%set_name\fP\&. 
.UNINDENT
.INDENT 7.0
.TP
.B \fI\%sink\fP  &operator=(const  \fI\%sink\fP  &other) 
Sink copy assignment operator. When a sink is copy assigned it is closed in order to disconnect it from any existing logger object and is then automatically registered with the same logger object as the source sink, using the same sink name. The sink name may be modified by calling \fI\%set_name\fP\&. 
.UNINDENT
.INDENT 7.0
.TP
.B ~sink() 
Sink destructor. When a sink is destructed it is automatically closed. 
.UNINDENT
.INDENT 7.0
.TP
.B void  close() 
Closes the sink. After this function returns the sink is closed and \fI\%log()\fP functions may not be called on the sink. The sink may be re\-opened by calling \fI\%logger::register_sink\fP\&. 
.UNINDENT
.INDENT 7.0
.TP
.B bool  is_open()  const  noexcept 
Returns true if the sink is open (connected to a logger), or false if the sink is closed (not connected to a logger). Log messages may only be written to a sink that is open. 
.UNINDENT
.INDENT 7.0
.TP
.B void  sync() 
Synchronizes all log calls previously made by this sink with the background thread and syncs all data to back\-end storage.
.INDENT 7.0
.TP
.B Post
All entries in the sink\(aqs queue have been processed by the background thread, buffers have been flushed and the \fI\%sync()\fP function on the storage interface has been called. For the default (disk) storage this means fsync(2) (if available) has been called. 
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B void  set_name(std::string  name) 
Sets the sink\(aqs name to the specified value. 
.UNINDENT
.INDENT 7.0
.TP
.B template<auto  Format,  auto  Level,  typename  Tags  =  void(),  typename  \&...Args> void  log(\fI\%Args\fP&&\&...  args)  noexcept((XTR_NOTHROW_INGESTIBLE(\fI\%Args\fP,  \fI\%args\fP)  &&  \&...)) 
Logs the given format string and arguments. This function is not intended to be used directly, instead one of the XTR_LOG macros should be used. It is provided for use in situations where use of a macro may be undesirable. 
.UNINDENT
.INDENT 7.0
.TP
.B inline  void  set_level(\fI\%log_level_t\fP  l) 
Sets the log level of the sink to the specified level (see \fI\%log_level_t\fP). Any log statement made with a log level with lower importance than the current level will be dropped\-\-\-please see the \fI\%log levels\fP section of the user guide for details. 
.UNINDENT
.INDENT 7.0
.TP
.B inline  \fI\%log_level_t\fP  level()  const 
Returns the current log level (see \fI\%log_level_t\fP). 
.UNINDENT
.INDENT 7.0
.TP
.B inline  std::size_t  capacity()  const 
Returns the capacity (in bytes) of the queue that the sink uses to send log data to the background thread. To override the sink capacity set \fI\%XTR_SINK_CAPACITY\fP in xtr/config.hpp\&. 
.UNINDENT
.UNINDENT
.SH NOCOPY
.INDENT 0.0
.TP
.B template<typename  T> inline  auto  xtr::nocopy(const  \fI\%T\fP  &arg) 
nocopy is used to specify that a log argument should be passed by reference instead of by value, so that \fBarg\fP becomes \fBnocopy(arg)\fP\&. Note that by default, all strings including C strings and std::string_view are copied. In order to pass strings by reference they must be wrapped in a call to nocopy. Please see the \fI\%passing arguments by value or reference\fP and \fI\%string arguments\fP sections of the user guide for further details. 
.UNINDENT
.SH LOG LEVELS
.INDENT 0.0
.TP
.B enum  class  xtr::log_level_t 
Passed to \fI\%XTR_LOGL\fP, \fI\%XTR_LOGL_TSC\fP etc to indicate the severity of the log message. 
.sp
\fIValues:\fP
.INDENT 7.0
.TP
.B enumerator  none 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator  fatal 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator  error 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator  warning 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator  info 
.UNINDENT
.INDENT 7.0
.TP
.B enumerator  debug 
.UNINDENT
.UNINDENT
.sp
If the \fInone\fP level is applied to a sink then all log statements will be
disabled. Fatal log statements will still call
\fI\%abort(3)\fP <\fBhttps://www.man7.org/linux/man-pages/man3/abort.3.html\fP>, however.
.SH LOG LEVEL STYLES
.INDENT 0.0
.TP
.B using  xtr::log_level_style_t  =  const  char  *(*)(\fI\%log_level_t\fP) 
Log level styles are used to customise the formatting used when prefixing log statements with their associated log level (see \fI\%log_level_t\fP). Styles are simply function pointers\-\-\-to provide a custom style, define a function returning a string literal and accepting a single argument of type \fI\%log_level_t\fP and pass the function to \fI\%logger::logger\fP or \fI\%logger::set_log_level_style\fP\&. The values returned by the function will be prefixed to log statements produced by the logger. Two formatters are provided, the default formatter \fI\%default_log_level_style\fP and a System D compatible style \fI\%systemd_log_level_style\fP\&. 
.UNINDENT
.INDENT 0.0
.TP
.B const  char  *xtr::default_log_level_style(\fI\%log_level_t\fP  level) 
The default log level style (see \fI\%log_level_style_t\fP). Returns a single upper\-case character representing the log level followed by a space, e.g. "E ", "W ", "I " for \fI\%log_level_t::error\fP, \fI\%log_level_t::warning\fP, \fI\%log_level_t::info\fP and so on. 
.UNINDENT
.INDENT 0.0
.TP
.B const  char  *xtr::systemd_log_level_style(\fI\%log_level_t\fP  level) 
System D log level style (see \fI\%log_level_style_t\fP). Returns strings as described in \fI\%sd\-daemon(3)\fP <\fBhttps://man7.org/linux/man-pages/man3/sd-daemon.3.html\fP>, e.g. "<0>", "<1>", "<2>" etc. 
.UNINDENT
.SH STORAGE INTERFACES
.INDENT 0.0
.TP
.B struct  xtr::storage_interface 
Interface allowing custom back\-ends to be implemented. To create a custom back\-end, inherit from storage_interfance, implement all pure\-virtual functions then pass a \fI\%storage_interface_ptr\fP pointing to an instance of the custom back\-end to \fI\%logger::logger\fP\&. 
.sp
Public Functions
.INDENT 7.0
.TP
.B virtual  std::span<char>  allocate_buffer()  =  0 
Allocates a buffer for formatted log data to be written to. Once a buffer has been allocated, allocate_buffer will not be called again until the buffer has been submitted via \fI\%submit_buffer\fP\&. 
.UNINDENT
.INDENT 7.0
.TP
.B virtual  void  submit_buffer(char  *buf, std::size_t  size)  =  0 
Submits a buffer containing formatted log data to be written. 
.UNINDENT
.INDENT 7.0
.TP
.B virtual  void  flush()  =  0 
Invoked to indicate that the back\-end should write any buffered data to its associated backing store. 
.UNINDENT
.INDENT 7.0
.TP
.B virtual  void  sync()  noexcept  =  0 
Invoked to indicate that the back\-end should ensure that all data written to the associated backing store has reached permanent storage. 
.UNINDENT
.INDENT 7.0
.TP
.B virtual  int  reopen()  noexcept  =  0 
Invoked to indicate that if the back\-end has a regular file opened for writing log data then the file should be reopened. 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B using  xtr::storage_interface_ptr  =  std::unique_ptr<\fI\%storage_interface\fP> 
Convenience typedef for std::unique_ptr<\fI\%storage_interface\fP> 
.UNINDENT
.INDENT 0.0
.TP
.B class  xtr::io_uring_fd_storage  :  public  fd_storage_base 
An implementation of \fI\%storage_interface\fP that uses \fI\%io_uring(7)\fP <\fBhttps://www.man7.org/linux/man-pages/man7/io_uring.7.html\fP> to perform file I/O (Linux only). 
.sp
Public Functions
.INDENT 7.0
.TP
.B explicit  io_uring_fd_storage(int  fd, std::string  reopen_path  =  \fI\%null_reopen_path\fP, std::size_t  buffer_capacity  =  \fI\%default_buffer_capacity\fP, std::size_t  queue_size  =  \fI\%default_queue_size\fP, std::size_t  batch_size  =  \fI\%default_batch_size\fP) 
File descriptor constructor.
.sp
.INDENT 7.0
.IP \(bu 2
fd: File descriptor to write to. This will be duplicated via a call to \fI\%dup(2)\fP <\fBhttps://www.man7.org/linux/man-pages/man2/dup.2.html\fP>, so callers may close the file descriptor immediately after this constructor returns if desired. 
.IP \(bu 2
reopen_path: The path of the file associated with the fd argument. This path will be used to reopen the file if requested via the xtrctl \fI\%reopen command\fP\&. Pass \fI\%null_reopen_path\fP if no filename is associated with the file descriptor. 
.IP \(bu 2
buffer_capacity: The size in bytes of a single io_uring buffer. 
.IP \(bu 2
queue_size: The size of the io_uring submission queue. 
.IP \(bu 2
batch_size: The number of buffers to collect before submitting the buffers to io_uring. If \fI\%XTR_IO_URING_POLL\fP is set to 1 in xtr/config.hpp then this parameter has no effect. 
.UNINDENT

.UNINDENT
.sp
Public Static Attributes
.INDENT 7.0
.TP
.B static  constexpr  std::size_t  default_buffer_capacity  =  64  *  1024 
Default value for the buffer_capacity constructor argument. 
.UNINDENT
.INDENT 7.0
.TP
.B static  constexpr  std::size_t  default_queue_size  =  1024 
Default value for the queue_size constructor argument. 
.UNINDENT
.INDENT 7.0
.TP
.B static  constexpr  std::size_t  default_batch_size  =  32 
Default value for the batch_size constructor argument. 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  xtr::posix_fd_storage  :  public  fd_storage_base 
An implementation of \fI\%storage_interface\fP that uses standard \fI\%POSIX\fP <\fBhttps://pubs.opengroup.org/onlinepubs/9699919799/functions/write.html\fP> functions to perform file I/O. 
.sp
Public Functions
.INDENT 7.0
.TP
.B explicit  posix_fd_storage(int  fd, std::string  reopen_path  =  \fI\%null_reopen_path\fP, std::size_t  buffer_capacity  =  \fI\%default_buffer_capacity\fP) 
File descriptor constructor.
.sp
.INDENT 7.0
.IP \(bu 2
fd: File descriptor to write to. This will be duplicated via a call to \fI\%dup(2)\fP <\fBhttps://www.man7.org/linux/man-pages/man2/dup.2.html\fP>, so callers may close the file descriptor immediately after this constructor returns if desired. 
.IP \(bu 2
reopen_path: The path of the file associated with the fd argument. This path will be used to reopen the file if requested via the xtrctl \fI\%reopen command\fP\&. Pass \fI\%null_reopen_path\fP if no filename is associated with the file descriptor. 
.IP \(bu 2
buffer_capacity: The size in bytes of the internal write buffer. 
.UNINDENT

.UNINDENT
.sp
Public Static Attributes
.INDENT 7.0
.TP
.B static  constexpr  std::size_t  default_buffer_capacity  =  64  *  1024 
Default value for the buffer_capacity constructor argument. 
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \fI\%storage_interface_ptr\fP  xtr::make_fd_storage(const  char  *path) 
Creates a storage interface object from a path. If the host kernel supports \fI\%io_uring(7)\fP <\fBhttps://www.man7.org/linux/man-pages/man7/io_uring.7.html\fP> and libxtr was built on a machine with liburing header files available then an instance of \fI\%io_uring_fd_storage\fP will be created, otherwise an instance of \fI\%posix_fd_storage\fP will be created. To prevent \fI\%io_uring_fd_storage\fP from being used define set XTR_USE_IO_URING to 0 in xtr/config.hpp\&. 
.UNINDENT
.INDENT 0.0
.TP
.B \fI\%storage_interface_ptr\fP  xtr::make_fd_storage(FILE  *fp, std::string  reopen_path  =  \fI\%null_reopen_path\fP) 
Creates a storage interface object from a file descriptor and reopen path. Either an instance of \fI\%io_uring_fd_storage\fP or \fI\%posix_fd_storage\fP will be created, refer to \fI\%make_fd_storage(const char*)\fP for details.
.sp
.INDENT 7.0
.IP \(bu 2
fd: File handle to write to. The underlying file descriptor will be duplicated via a call to \fI\%dup(2)\fP <\fBhttps://www.man7.org/linux/man-pages/man2/dup.2.html\fP>, so callers may close the file handle immediately after this function returns if desired. 
.IP \(bu 2
reopen_path: The path of the file associated with the fp argument. This path will be used to reopen the file if requested via the xtrctl \fI\%reopen command\fP\&. Pass \fI\%null_reopen_path\fP if no filename is associated with the file handle. 
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B \fI\%storage_interface_ptr\fP  xtr::make_fd_storage(int  fd, std::string  reopen_path  =  \fI\%null_reopen_path\fP) 
Creates a storage interface object from a file descriptor and reopen path. Either an instance of \fI\%io_uring_fd_storage\fP or \fI\%posix_fd_storage\fP will be created, refer to \fI\%make_fd_storage(const char*)\fP for details.
.sp
.INDENT 7.0
.IP \(bu 2
fd: File descriptor to write to. This will be duplicated via a call to \fI\%dup(2)\fP <\fBhttps://www.man7.org/linux/man-pages/man2/dup.2.html\fP>, so callers may close the file descriptor immediately after this function returns if desired. 
.IP \(bu 2
reopen_path: The path of the file associated with the fd argument. This path will be used to reopen the file if requested via the xtrctl \fI\%reopen command\fP\&. Pass \fI\%null_reopen_path\fP if no filename is associated with the file descriptor. 
.UNINDENT

.UNINDENT
.INDENT 0.0
.TP
.B constexpr  auto  xtr::null_reopen_path  =  "" 
When passed to the reopen_path argument of \fI\%make_fd_storage\fP, \fI\%posix_fd_storage::posix_fd_storage\fP, \fI\%io_uring_fd_storage\fP or \fI\%logger::logger\fP indicates that the output file handle has no associated filename and so should not be reopened if requested by the xtrctl \fI\%reopen command\fP\&. 
.UNINDENT
.SH DEFAULT COMMAND PATH
.INDENT 0.0
.TP
.B std::string  xtr::default_command_path() 
Returns the default command path used for the \fI\%command_path\fP argument of \fI\%logger::logger\fP (and other logger constructors). A string with the format "$XDG_RUNTIME_DIR/xtrctl.<pid>.<N>" is returned, where N begins at 0 and increases for each call to the function. If the directory specified by $XDG_RUNTIME_DIR does not exist or is inaccessible then $TMPDIR is used instead. If $XDG_RUNTIME_DIR or $TMPDIR are not set then "/run/user/<uid>" and "/tmp" are used instead, respectively. 
.UNINDENT
.SH NULL COMMAND PATH
.INDENT 0.0
.TP
.B constexpr  auto  xtr::null_command_path  =  "" 
When passed to the \fI\%command_path\fP argument of \fI\%logger::logger\fP (or other logger constructors) indicates that no command socket should be created. 
.UNINDENT
.SH CONFIGURATION VARIABLES
.sp
The header file \fIxtr/config.hpp\fP contains configuration variables that may be
overridden by users.
.INDENT 0.0
.TP
.B XTR_SINK_CAPACITY 
Sets the capacity (in bytes) of the queue that sinks use to send log data to the background thread. Each sink will have an individual queue of this size. Users are permitted to define this variable in order to set a custom capacity. User provided capacities may be rounded up\-\-\-to obtain the actual capacity invoke \fI\%xtr::sink::capacity\fP\&.
.sp
Note that if the single header include file is not used then this setting may only be defined in either config.hpp or by overriding CXXFLAGS, and requires rebuilding libxtr if set. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_USE_IO_URING 
Set to 1 to enable io_uring support. If this setting is not manually defined then io_uring support will be automatically detected. If libxtr is built with io_uring support enabled then the library will still function on kernels that do not have io_uring support, as a run\-time check will be performed before attempting to use any io_uring system calls.
.sp
Note that if the single header include file is not used then this setting may only be defined in either config.hpp or by overriding CXXFLAGS, and requires rebuilding libxtr if set. 
.UNINDENT
.INDENT 0.0
.TP
.B XTR_IO_URING_POLL 
Set to 1 to enable submission queue polling when using io_uring. If enabled the IORING_SETUP_SQPOLL flag will be passed to io_uring_setup(2).
.sp
Note that if the single header include file is not used then this setting may only be defined in either config.hpp or by overriding CXXFLAGS, and requires rebuilding libxtr if set. 
.UNINDENT
.SH AUTHOR
Chris E. Holloway
.SH COPYRIGHT
2022, Chris E. Holloway
.\" Generated by docutils manpage writer.
.
